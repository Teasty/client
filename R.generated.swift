//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `License.doc`.
    static let licenseDoc = Rswift.FileResource(bundle: R.hostingBundle, name: "License", pathExtension: "doc")
    /// Resource file `cart.gif`.
    static let cartGif = Rswift.FileResource(bundle: R.hostingBundle, name: "cart", pathExtension: "gif")
    /// Resource file `heart.gif`.
    static let heartGif = Rswift.FileResource(bundle: R.hostingBundle, name: "heart", pathExtension: "gif")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "License", withExtension: "doc")`
    static func licenseDoc(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licenseDoc
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cart", withExtension: "gif")`
    static func cartGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "heart", withExtension: "gif")`
    static func heartGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.heartGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 53 images.
  struct image {
    /// Image `Fire`.
    static let fire = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fire")
    /// Image `auth`.
    static let auth = Rswift.ImageResource(bundle: R.hostingBundle, name: "auth")
    /// Image `buttonCancel`.
    static let buttonCancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "buttonCancel")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `carBlack`.
    static let carBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "carBlack")
    /// Image `carBlue`.
    static let carBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "carBlue")
    /// Image `carGray`.
    static let carGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "carGray")
    /// Image `carImage`.
    static let carImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "carImage")
    /// Image `carRed`.
    static let carRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "carRed")
    /// Image `carWhite`.
    static let carWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "carWhite")
    /// Image `cardYellow`.
    static let cardYellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "cardYellow")
    /// Image `card`.
    static let card = Rswift.ImageResource(bundle: R.hostingBundle, name: "card")
    /// Image `cart.gif`.
    static let cartGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart.gif")
    /// Image `cash`.
    static let cash = Rswift.ImageResource(bundle: R.hostingBundle, name: "cash")
    /// Image `checkmark`.
    static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark")
    /// Image `chevroneRight`.
    static let chevroneRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevroneRight")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `deleteStep`.
    static let deleteStep = Rswift.ImageResource(bundle: R.hostingBundle, name: "deleteStep")
    /// Image `dropDown`.
    static let dropDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "dropDown")
    /// Image `gradientSideMenu`.
    static let gradientSideMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "gradientSideMenu")
    /// Image `heart.gif`.
    static let heartGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart.gif")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `launchScreen`.
    static let launchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "launchScreen")
    /// Image `logoSingle`.
    static let logoSingle = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoSingle")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `markFull`.
    static let markFull = Rswift.ImageResource(bundle: R.hostingBundle, name: "markFull")
    /// Image `markNone`.
    static let markNone = Rswift.ImageResource(bundle: R.hostingBundle, name: "markNone")
    /// Image `money`.
    static let money = Rswift.ImageResource(bundle: R.hostingBundle, name: "money")
    /// Image `myLocation`.
    static let myLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "myLocation")
    /// Image `optionPayment`.
    static let optionPayment = Rswift.ImageResource(bundle: R.hostingBundle, name: "optionPayment")
    /// Image `optionTime`.
    static let optionTime = Rswift.ImageResource(bundle: R.hostingBundle, name: "optionTime")
    /// Image `optionWish`.
    static let optionWish = Rswift.ImageResource(bundle: R.hostingBundle, name: "optionWish")
    /// Image `orderCancel`.
    static let orderCancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "orderCancel")
    /// Image `pencil`.
    static let pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "pencil")
    /// Image `phoneCall`.
    static let phoneCall = Rswift.ImageResource(bundle: R.hostingBundle, name: "phoneCall")
    /// Image `pinFrom`.
    static let pinFrom = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinFrom")
    /// Image `pinTo`.
    static let pinTo = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinTo")
    /// Image `placeHolder`.
    static let placeHolder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeHolder")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `pointSelected`.
    static let pointSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "pointSelected")
    /// Image `point`.
    static let point = Rswift.ImageResource(bundle: R.hostingBundle, name: "point")
    /// Image `sideMenuButton`.
    static let sideMenuButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "sideMenuButton")
    /// Image `tabBarCatalogSelect`.
    static let tabBarCatalogSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarCatalogSelect")
    /// Image `tabBarCatalogUnSelect`.
    static let tabBarCatalogUnSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarCatalogUnSelect")
    /// Image `tabBarProfileSelect`.
    static let tabBarProfileSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarProfileSelect")
    /// Image `tabBarProfileUnSelect`.
    static let tabBarProfileUnSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarProfileUnSelect")
    /// Image `tabBarPurchasesSelect`.
    static let tabBarPurchasesSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarPurchasesSelect")
    /// Image `tabBarPurchasesUnSelect`.
    static let tabBarPurchasesUnSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarPurchasesUnSelect")
    /// Image `tabBarSelectionSelect`.
    static let tabBarSelectionSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarSelectionSelect")
    /// Image `tabBarSelectionUnSelect`.
    static let tabBarSelectionUnSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarSelectionUnSelect")
    /// Image `tariffDefaultImage`.
    static let tariffDefaultImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "tariffDefaultImage")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Fire", bundle: ..., traitCollection: ...)`
    static func fire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fire, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auth", bundle: ..., traitCollection: ...)`
    static func auth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "buttonCancel", bundle: ..., traitCollection: ...)`
    static func buttonCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buttonCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carBlack", bundle: ..., traitCollection: ...)`
    static func carBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carBlue", bundle: ..., traitCollection: ...)`
    static func carBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carGray", bundle: ..., traitCollection: ...)`
    static func carGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carImage", bundle: ..., traitCollection: ...)`
    static func carImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carRed", bundle: ..., traitCollection: ...)`
    static func carRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carWhite", bundle: ..., traitCollection: ...)`
    static func carWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card", bundle: ..., traitCollection: ...)`
    static func card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cardYellow", bundle: ..., traitCollection: ...)`
    static func cardYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart.gif", bundle: ..., traitCollection: ...)`
    static func cartGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cash", bundle: ..., traitCollection: ...)`
    static func cash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
    static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevroneRight", bundle: ..., traitCollection: ...)`
    static func chevroneRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevroneRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deleteStep", bundle: ..., traitCollection: ...)`
    static func deleteStep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteStep, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dropDown", bundle: ..., traitCollection: ...)`
    static func dropDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gradientSideMenu", bundle: ..., traitCollection: ...)`
    static func gradientSideMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gradientSideMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart.gif", bundle: ..., traitCollection: ...)`
    static func heartGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launchScreen", bundle: ..., traitCollection: ...)`
    static func launchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoSingle", bundle: ..., traitCollection: ...)`
    static func logoSingle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoSingle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "markFull", bundle: ..., traitCollection: ...)`
    static func markFull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.markFull, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "markNone", bundle: ..., traitCollection: ...)`
    static func markNone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.markNone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "money", bundle: ..., traitCollection: ...)`
    static func money(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myLocation", bundle: ..., traitCollection: ...)`
    static func myLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "optionPayment", bundle: ..., traitCollection: ...)`
    static func optionPayment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.optionPayment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "optionTime", bundle: ..., traitCollection: ...)`
    static func optionTime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.optionTime, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "optionWish", bundle: ..., traitCollection: ...)`
    static func optionWish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.optionWish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "orderCancel", bundle: ..., traitCollection: ...)`
    static func orderCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orderCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pencil", bundle: ..., traitCollection: ...)`
    static func pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pencil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phoneCall", bundle: ..., traitCollection: ...)`
    static func phoneCall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneCall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinFrom", bundle: ..., traitCollection: ...)`
    static func pinFrom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinFrom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinTo", bundle: ..., traitCollection: ...)`
    static func pinTo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinTo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeHolder", bundle: ..., traitCollection: ...)`
    static func placeHolder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeHolder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "point", bundle: ..., traitCollection: ...)`
    static func point(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.point, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pointSelected", bundle: ..., traitCollection: ...)`
    static func pointSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pointSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sideMenuButton", bundle: ..., traitCollection: ...)`
    static func sideMenuButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sideMenuButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarCatalogSelect", bundle: ..., traitCollection: ...)`
    static func tabBarCatalogSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarCatalogSelect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarCatalogUnSelect", bundle: ..., traitCollection: ...)`
    static func tabBarCatalogUnSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarCatalogUnSelect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarProfileSelect", bundle: ..., traitCollection: ...)`
    static func tabBarProfileSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarProfileSelect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarProfileUnSelect", bundle: ..., traitCollection: ...)`
    static func tabBarProfileUnSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarProfileUnSelect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarPurchasesSelect", bundle: ..., traitCollection: ...)`
    static func tabBarPurchasesSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarPurchasesSelect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarPurchasesUnSelect", bundle: ..., traitCollection: ...)`
    static func tabBarPurchasesUnSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarPurchasesUnSelect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarSelectionSelect", bundle: ..., traitCollection: ...)`
    static func tabBarSelectionSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarSelectionSelect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarSelectionUnSelect", bundle: ..., traitCollection: ...)`
    static func tabBarSelectionUnSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarSelectionUnSelect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tariffDefaultImage", bundle: ..., traitCollection: ...)`
    static func tariffDefaultImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tariffDefaultImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 3 localization keys.
    struct localizable {
      /// ru translation: Выбрать
      ///
      /// Locales: ru
      static let datePickerAlertButtonDefault = Rswift.StringResource(key: "DatePicker.alertButton.default", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Готово
      ///
      /// Locales: ru
      static let textViewIntputReadyButtonDefault = Rswift.StringResource(key: "TextViewIntput.readyButton.default", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ПЕРВОЕ ГОРОДСКОЕ ТАКСИ
      ///
      /// Locales: ru
      static let loadingTitle = Rswift.StringResource(key: "Loading.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)

      /// ru translation: Выбрать
      ///
      /// Locales: ru
      static func datePickerAlertButtonDefault(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DatePicker.alertButton.default", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DatePicker.alertButton.default"
        }

        return NSLocalizedString("DatePicker.alertButton.default", bundle: bundle, comment: "")
      }

      /// ru translation: Готово
      ///
      /// Locales: ru
      static func textViewIntputReadyButtonDefault(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TextViewIntput.readyButton.default", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TextViewIntput.readyButton.default"
        }

        return NSLocalizedString("TextViewIntput.readyButton.default", bundle: bundle, comment: "")
      }

      /// ru translation: ПЕРВОЕ ГОРОДСКОЕ ТАКСИ
      ///
      /// Locales: ru
      static func loadingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading.Title"
        }

        return NSLocalizedString("Loading.Title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
